#!/usr/bin/env python3
"""
G√©n√©ration de donn√©es de d√©monstration pour l'application Bo√Æte √† Id√©es
Version avec nouveau mod√®le de votation (SubjectState, Votation, Vote)
"""

import asyncio
from datetime import datetime, timedelta
from src.services.database import Database
from src.models.user import User
from src.models.subject import Subject
from src.models.subject_state import SubjectState
from src.models.idea import Idea
from src.models.votation import Votation
from src.models.vote import Vote
from src.models.activity_log import ActivityLog
from src.models.organization import Organization
from src.services.auth_service import get_password_hash


async def create_demo_data():
    """Cr√©er des donn√©es de d√©monstration compl√®tes"""
    
    print("üöÄ G√©n√©ration des donn√©es de d√©monstration...")
    
    # 0. Initialiser la connexion √† la base de donn√©es
    print("üîå Connexion √† la base de donn√©es...")
    await Database.connect()
    
    # 1. Supprimer toutes les donn√©es existantes
    print("üóëÔ∏è Suppression des donn√©es existantes...")
    await Database.engine.get_collection(User).delete_many({})
    await Database.engine.get_collection(Subject).delete_many({})
    await Database.engine.get_collection(SubjectState).delete_many({})
    await Database.engine.get_collection(Idea).delete_many({})
    await Database.engine.get_collection(Votation).delete_many({})
    await Database.engine.get_collection(Vote).delete_many({})
    await Database.engine.get_collection(ActivityLog).delete_many({})
    await Database.engine.get_collection(Organization).delete_many({})
    
    # 2. Cr√©er l'organisation
    print("üè¢ Cr√©ation de l'organisation...")
    organization = Organization(
        name="TechCorp Innovation",
        description="Leader dans le d√©veloppement de solutions technologiques innovantes",
        website="https://techcorp-innovation.fr",
        email="contact@techcorp-innovation.fr",
        phone="+33 1 23 45 67 89",
        address="123 Avenue de l'Innovation, 75001 Paris",
        primary_color="#3B82F6",
        secondary_color="#EF4444",
        accent_color="#10B981",
        logo_filename="logo_techcorp.png"
    )
    await Database.engine.save(organization)
    
    # 3. Cr√©er les utilisateurs
    print("üë• Cr√©ation des utilisateurs...")
    
    # Super Admin
    superadmin = User(
        email="admin@techcorp-innovation.fr",
        nom="Dubois",
        prenom="Marie",
        pwd=get_password_hash("admin123"),
        roles=["superadmin"]
    )
    await Database.engine.save(superadmin)
    
    # Gestionnaires
    gestionnaire1 = User(
        email="pierre.martin@techcorp-innovation.fr",
        nom="Martin",
        prenom="Pierre",
        pwd=get_password_hash("gest123"),
        roles=["gestionnaire"]
    )
    
    gestionnaire2 = User(
        email="sophie.laurent@techcorp-innovation.fr",
        nom="Laurent",
        prenom="Sophie",
        pwd=get_password_hash("gest123"),
        roles=["gestionnaire"]
    )
    
    await Database.engine.save(gestionnaire1)
    await Database.engine.save(gestionnaire2)
    
    # Utilisateurs invit√©s
    users_data = [
        ("jean.dupont@techcorp-innovation.fr", "Dupont", "Jean"),
        ("alice.bernard@techcorp-innovation.fr", "Bernard", "Alice"),
        ("thomas.petit@techcorp-innovation.fr", "Petit", "Thomas"),
        ("julie.moreau@techcorp-innovation.fr", "Moreau", "Julie"),
        ("david.garcia@techcorp-innovation.fr", "Garcia", "David"),
        ("emma.roux@techcorp-innovation.fr", "Roux", "Emma"),
        ("lucas.blanc@techcorp-innovation.fr", "Blanc", "Lucas"),
        ("chloe.simon@techcorp-innovation.fr", "Simon", "Chlo√©")
    ]
    
    users = []
    for email, nom, prenom in users_data:
        user = User(
            email=email,
            nom=nom,
            prenom=prenom,
            pwd=get_password_hash("user123"),
            roles=["user"]
        )
        await Database.engine.save(user)
        users.append(user)
    
    # 4. Cr√©er les sujets
    print("üìã Cr√©ation des sujets...")
    
    # Sujet 1 - T√©l√©travail (g√©r√© par gestionnaire1)
    subject1 = Subject(
        name="Am√©lioration du t√©l√©travail",
        description="Comment optimiser l'organisation du t√©l√©travail dans notre entreprise ?",
        superadmin_id=str(superadmin.id),
        gestionnaires_ids=[str(gestionnaire1.id)],
        users_ids=[str(u.id) for u in users[:4]],  # 4 premiers utilisateurs
        emission_active=True
    )
    await Database.engine.save(subject1)
    
    # √âtat d'√©mission pour sujet1
    subject1_state = SubjectState(
        subject_id=str(subject1.id),
        is_activated=True
    )
    await Database.engine.save(subject1_state)
    
    # Sujet 2 - Innovation (g√©r√© par gestionnaire2)
    subject2 = Subject(
        name="Innovations technologiques",
        description="Quelles technologies √©mergentes devons-nous adopter en 2025 ?",
        superadmin_id=str(superadmin.id),
        gestionnaires_ids=[str(gestionnaire2.id)],
        users_ids=[str(u.id) for u in users[2:6]],  # utilisateurs 3-6
        emission_active=False
    )
    await Database.engine.save(subject2)
    
    # √âtat d'√©mission pour sujet2 (d√©sactiv√©)
    subject2_state = SubjectState(
        subject_id=str(subject2.id),
        is_activated=False
    )
    await Database.engine.save(subject2_state)
    
    # Sujet 3 - Bien-√™tre (g√©r√© par les deux gestionnaires)
    subject3 = Subject(
        name="Bien-√™tre au travail",
        description="Initiatives pour am√©liorer la qualit√© de vie au bureau",
        superadmin_id=str(superadmin.id),
        gestionnaires_ids=[str(gestionnaire1.id), str(gestionnaire2.id)],
        users_ids=[str(u.id) for u in users[4:]],  # 4 derniers utilisateurs
        emission_active=False
    )
    await Database.engine.save(subject3)
    
    # √âtat d'√©mission pour sujet3
    subject3_state = SubjectState(
        subject_id=str(subject3.id),
        is_activated=False
    )
    await Database.engine.save(subject3_state)
    
    # 5. Cr√©er les id√©es
    print("üí° Cr√©ation des id√©es...")
    
    # Id√©es pour le sujet t√©l√©travail
    ideas_subject1 = [
        ("Espaces de coworking partag√©s", "Cr√©er des espaces de coworking dans diff√©rents quartiers pour les employ√©s", users[0]),
        ("Outils de collaboration am√©lior√©s", "Investir dans de meilleurs outils de visioconf√©rence et collaboration", users[1]),
        ("Formation au t√©l√©travail", "Programme de formation pour optimiser la productivit√© en t√©l√©travail", users[2]),
        ("Flex office hybride", "Syst√®me de r√©servation de bureaux pour travail hybride", users[3])
    ]
    
    ideas1 = []
    for title, description, user in ideas_subject1:
        idea = Idea(
            subject_id=str(subject1.id),
            user_id=str(user.id),
            title=title,
            description=description,
            created_at=datetime.now() - timedelta(days=7, hours=hash(title) % 24)
        )
        await Database.engine.save(idea)
        ideas1.append(idea)
    
    # Id√©es pour le sujet innovation
    ideas_subject2 = [
        ("Intelligence Artificielle", "Int√©grer l'IA dans nos processus de d√©veloppement", users[2]),
        ("Blockchain", "Explorer les applications blockchain pour nos services", users[3]),
        ("IoT et capteurs", "D√©ployer des capteurs IoT pour optimiser les espaces de travail", users[4]),
        ("R√©alit√© augment√©e", "Utiliser la RA pour la formation et la maintenance", users[5]),
        ("Cloud natif", "Migration vers une architecture cloud-native", users[2])
    ]
    
    ideas2 = []
    for title, description, user in ideas_subject2:
        idea = Idea(
            subject_id=str(subject2.id),
            user_id=str(user.id),
            title=title,
            description=description,
            created_at=datetime.now() - timedelta(days=5, hours=hash(title) % 24)
        )
        await Database.engine.save(idea)
        ideas2.append(idea)
    
    # Id√©es pour le sujet bien-√™tre
    ideas_subject3 = [
        ("Salle de sport", "Am√©nager une salle de sport dans l'entreprise", users[4]),
        ("Cours de yoga", "Organiser des cours de yoga pendant la pause d√©jeuner", users[5]),
        ("Jardins partag√©s", "Cr√©er des espaces verts et jardins partag√©s", users[6]),
        ("T√©l√©consultation m√©dicale", "Service de t√©l√©consultation avec des m√©decins", users[7])
    ]
    
    ideas3 = []
    for title, description, user in ideas_subject3:
        idea = Idea(
            subject_id=str(subject3.id),
            user_id=str(user.id),
            title=title,
            description=description,
            created_at=datetime.now() - timedelta(days=3, hours=hash(title) % 24)
        )
        await Database.engine.save(idea)
        ideas3.append(idea)
    
    # 6. Cr√©er les votations
    print("üó≥Ô∏è Cr√©ation des votations...")
    
    # Votation 1 - Sujet innovation (ferm√©e avec r√©sultats)
    votation1 = Votation(
        subject_id=str(subject2.id),
        votation_name="Vote priorit√©s tech 2025",
        ideas_list=[str(idea.id) for idea in ideas2[:3]],  # 3 premi√®res id√©es
        vote_limit=2,
        is_activated=False,
        allow_multiple_active=False,
        created_at=datetime.now() - timedelta(days=4),
        activated_at=datetime.now() - timedelta(days=3),
        closed_at=datetime.now() - timedelta(days=1)
    )
    await Database.engine.save(votation1)
    
    # Votation 2 - Sujet bien-√™tre (active)
    votation2 = Votation(
        subject_id=str(subject3.id),
        votation_name="Initiatives bien-√™tre prioritaires",
        ideas_list=[str(idea.id) for idea in ideas3],  # Toutes les id√©es
        vote_limit=3,
        is_activated=True,
        allow_multiple_active=False,
        created_at=datetime.now() - timedelta(days=2),
        activated_at=datetime.now() - timedelta(days=1),
        closed_at=None
    )
    await Database.engine.save(votation2)
    
    # Votation 3 - Sujet innovation (cr√©√©e, pas encore activ√©e)
    votation3 = Votation(
        subject_id=str(subject2.id),
        votation_name="Technologies √©mergentes - Phase 2",
        ideas_list=[str(idea.id) for idea in ideas2[2:]],  # 3 derni√®res id√©es
        vote_limit=1,
        is_activated=False,
        allow_multiple_active=True,  # Autorise multiple
        created_at=datetime.now() - timedelta(hours=6),
        activated_at=None,
        closed_at=None
    )
    await Database.engine.save(votation3)
    
    # 7. Cr√©er les votes
    print("‚úÖ Cr√©ation des votes...")
    
    # Votes pour la votation1 (ferm√©e)
    vote_patterns1 = [
        (ideas2[0], users[2:5]),  # IA: 3 votes
        (ideas2[1], users[3:6]),  # Blockchain: 3 votes
        (ideas2[2], users[2:4])   # IoT: 2 votes
    ]
    
    for idea, voters in vote_patterns1:
        for user in voters:
            if str(user.id) in subject2.users_ids:  # V√©rifier acc√®s au sujet
                vote = Vote(
                    votation_id=str(votation1.id),
                    idea_id=str(idea.id),
                    user_id=str(user.id),
                    created_at=datetime.now() - timedelta(days=2, minutes=hash(str(user.id)) % 120)
                )
                await Database.engine.save(vote)
    
    # Votes pour la votation2 (active)
    vote_patterns2 = [
        (ideas3[0], users[4:7]),  # Salle de sport: 3 votes
        (ideas3[1], users[5:8]),  # Yoga: 3 votes
        (ideas3[2], users[4:6]),  # Jardins: 2 votes
        (ideas3[3], users[6:8])   # T√©l√©consultation: 2 votes
    ]
    
    for idea, voters in vote_patterns2:
        for user in voters:
            if str(user.id) in subject3.users_ids:  # V√©rifier acc√®s au sujet
                vote = Vote(
                    votation_id=str(votation2.id),
                    idea_id=str(idea.id),
                    user_id=str(user.id),
                    created_at=datetime.now() - timedelta(hours=hash(str(user.id)) % 12)
                )
                await Database.engine.save(vote)
    
    # 8. Cr√©er les logs d'activit√©
    print("üìù Cr√©ation des logs d'activit√©...")
    
    activity_logs = [
        # Cr√©ation des sujets
        ActivityLog(
            action="create_subject",
            subject_id=str(subject1.id),
            user_id=str(superadmin.id),
            user_email=superadmin.email,
            user_name=f"{superadmin.prenom} {superadmin.nom}",
            description=f"Cr√©ation du sujet '{subject1.name}'",
            details="Sujet cr√©√© avec √©mission d'id√©es activ√©e",
            timestamp=datetime.now() - timedelta(days=8)
        ),
        
        # Activation √©mission sujet1
        ActivityLog(
            action="activate_subject_emission",
            subject_id=str(subject1.id),
            user_id=str(gestionnaire1.id),
            user_email=gestionnaire1.email,
            user_name=f"{gestionnaire1.prenom} {gestionnaire1.nom}",
            description=f"Activation de l'√©mission d'id√©es pour '{subject1.name}'",
            details="Les utilisateurs peuvent maintenant soumettre des id√©es",
            timestamp=datetime.now() - timedelta(days=7)
        ),
        
        # Cr√©ation votation1
        ActivityLog(
            action="create_votation",
            subject_id=str(subject2.id),
            user_id=str(gestionnaire2.id),
            user_email=gestionnaire2.email,
            user_name=f"{gestionnaire2.prenom} {gestionnaire2.nom}",
            description=f"Cr√©ation de la votation '{votation1.votation_name}'",
            details=f"3 id√©es s√©lectionn√©es, limite de {votation1.vote_limit} votes par utilisateur",
            timestamp=datetime.now() - timedelta(days=4)
        ),
        
        # Activation votation1
        ActivityLog(
            action="activate_votation",
            subject_id=str(subject2.id),
            user_id=str(gestionnaire2.id),
            user_email=gestionnaire2.email,
            user_name=f"{gestionnaire2.prenom} {gestionnaire2.nom}",
            description=f"Activation de la votation '{votation1.votation_name}'",
            details="Session de vote ouverte aux utilisateurs",
            timestamp=datetime.now() - timedelta(days=3)
        ),
        
        # Cl√¥ture votation1
        ActivityLog(
            action="close_votation",
            subject_id=str(subject2.id),
            user_id=str(gestionnaire2.id),
            user_email=gestionnaire2.email,
            user_name=f"{gestionnaire2.prenom} {gestionnaire2.nom}",
            description=f"Cl√¥ture de la votation '{votation1.votation_name}'",
            details="8 votes re√ßus, r√©sultats disponibles",
            timestamp=datetime.now() - timedelta(days=1)
        ),
        
        # Activation votation2
        ActivityLog(
            action="activate_votation",
            subject_id=str(subject3.id),
            user_id=str(gestionnaire1.id),
            user_email=gestionnaire1.email,
            user_name=f"{gestionnaire1.prenom} {gestionnaire1.nom}",
            description=f"Activation de la votation '{votation2.votation_name}'",
            details="4 id√©es disponibles au vote",
            timestamp=datetime.now() - timedelta(days=1)
        )
    ]
    
    for log in activity_logs:
        await Database.engine.save(log)
    
    print("‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s !")
    print(f"üìä R√©sum√©:")
    print(f"   - 1 organisation: {organization.name}")
    print(f"   - 11 utilisateurs (1 superadmin, 2 gestionnaires, 8 invit√©s)")
    print(f"   - 3 sujets avec √©tats d'√©mission")
    print(f"   - 13 id√©es r√©parties sur les 3 sujets")
    print(f"   - 3 votations (1 ferm√©e, 1 active, 1 cr√©√©e)")
    print(f"   - {len([v for v in vote_patterns1 for u in v[1]]) + len([v for v in vote_patterns2 for u in v[1]])} votes")
    print(f"   - {len(activity_logs)} logs d'activit√©")
    print()
    print("üîë Comptes de test:")
    print("   Superadmin: admin@techcorp-innovation.fr / admin123")
    print("   Gestionnaire 1: pierre.martin@techcorp-innovation.fr / gest123")
    print("   Gestionnaire 2: sophie.laurent@techcorp-innovation.fr / gest123")
    print("   Invit√©s: [prenom].[nom]@techcorp-innovation.fr / user123")


if __name__ == "__main__":
    asyncio.run(create_demo_data())
